import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import json
import os
from datetime import datetime

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot configuration
BOT_TOKEN = "7895866430:AAGK_aniRli6UmhRek09go7VoCd3T6gaXVE"
ADMIN_ID = 6317648827

# File to store orders
ORDERS_FILE = "orders.json"

def load_orders():
    """Load orders from file"""
    if os.path.exists(ORDERS_FILE):
        try:
            with open(ORDERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_orders(orders):
    """Save orders to file"""
    with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=2)

# Load existing orders
orders = load_orders()
order_counter = max([int(k) for k in orders.keys()] + [0])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Send a welcome message when /start command is issued"""
    welcome_text = """
ЁЯОо **Free Fire Diamond Shop ржП рж╕рзНржмрж╛ржЧрждржо!** ЁЯОо

ржЖржкржирж╛рж░ ржЧрзЗржорж┐ржВ ржЕржнрж┐ржЬрзНржЮрждрж╛ржХрзЗ ржЖрж░ржУ ржЙржирзНржиржд ржХрж░рждрзЗ ржЖржорж░рж╛ ржПржЦрж╛ржирзЗ ржЖржЫрж┐!

тЬи **ржЖржорж╛ржжрзЗрж░ рж╕рзЗржмрж╛рж╕ржорзВрж╣:**
тАв ржжрзНрж░рзБржд ржУ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржп ржбрж╛ржпрж╝ржоржирзНржб ржЯржкржЖржк
тАв рж╕рж╛рж╢рзНрж░ржпрж╝рзА ржорзВрж▓рзНржпрзЗ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рзЗржмрж╛
тАв рзирзк/рзн ржХрж╛рж╕рзНржЯржорж╛рж░ рж╕рж╛ржкрзЛрж░рзНржЯ

ЁЯЪА **рж╢рзБрж░рзБ ржХрж░рждрзЗ /topup ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи**

ржЖрж░ржУ ржХржорж╛ржирзНржбрзЗрж░ ржЬржирзНржп /commands ржЯрж╛ржЗржк ржХрж░рзБржиред

FIRE ARENA! ЁЯФе
    """
    await update.message.reply_text(welcome_text, parse_mode='Markdown')

async def commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show available commands"""
    commands_text = """
ЁЯУЛ **ржмржЯ ржХржорж╛ржирзНржб рждрж╛рж▓рж┐ржХрж╛:**

ЁЯФ╣ **/start** - рж╕рзНржмрж╛ржЧрждржо ржмрж╛рж░рзНрждрж╛
ЁЯФ╣ **/topup** - ржбрж╛ржпрж╝ржоржирзНржб ржкрзНржпрж╛ржХрзЗржЬ ржжрзЗржЦрзБржи
ЁЯФ╣ **/confirm** - ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо ржХрж░рзБржи
   ЁЯУЭ Format: `/confirm uid ingamename diamond method txid`
ЁЯФ╣ **/like** - рззрзжрзж рж▓рж╛ржЗржХ ржЕрж░рзНржбрж╛рж░ ржХрж░рзБржи
ЁЯФ╣ **/number** - ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░ ржжрзЗржЦрзБржи
ЁЯФ╣ **/help** - рж╕рж╛рж╣рж╛ржпрзНржп ржкрзЗрждрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
ЁЯФ╣ **/commands** - ржПржЗ рждрж╛рж▓рж┐ржХрж╛

ЁЯТб **ржЯрж┐ржкрж╕:** ржХрзЛржи рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ /help ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи!
    """
    await update.message.reply_text(commands_text, parse_mode='Markdown')

async def topup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show topup packages"""
    topup_text = """
ЁЯТО **Free Fire Diamond Packages** ЁЯТО

ЁЯФ╕ **20 ЁЯТО** - **22 ржЯрж╛ржХрж╛**
ЁЯФ╕ **50 ЁЯТО** - **36 ржЯрж╛ржХрж╛**
ЁЯФ╕ **115 ЁЯТО** - **77 ржЯрж╛ржХрж╛**
ЁЯФ╕ **240 ЁЯТО** - **153 ржЯрж╛ржХрж╛**
ЁЯФ╕ **610 ЁЯТО** - **385 ржЯрж╛ржХрж╛**
ЁЯФ╕ **1240 ЁЯТО** - **770 ржЯрж╛ржХрж╛**
ЁЯФ╕ **2530 ЁЯТО** - **1530 ржЯрж╛ржХрж╛**

ЁЯУЕ **рж╕рж╛ржмрж╕рзНржХрзНрж░рж┐ржкрж╢ржи ржкрзНржпрж╛ржХрзЗржЬ:**
ЁЯФ╕ **Weekly** - **153 ржЯрж╛ржХрж╛**
ЁЯФ╕ **Monthly** - **755 ржЯрж╛ржХрж╛**

тЭдя╕П **ржмрзЛржирж╛рж╕ рж╕рж╛рж░рзНржнрж┐рж╕:**
ЁЯФ╕ **100 Like** - **10 ржЯрж╛ржХрж╛**

ЁЯУЮ **ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ:** `/confirm` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
ЁЯТ│ **ржкрзЗржорзЗржирзНржЯ ржирж╛ржорзНржмрж╛рж░:** `/number` ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи

тЪб **ржжрзНрж░рзБржд ржбрзЗрж▓рж┐ржнрж╛рж░рж┐ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐!**
    """
    await update.message.reply_text(topup_text, parse_mode='Markdown')

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process order confirmation"""
    global order_counter, orders
    
    try:
        # Parse command arguments
        args = context.args
        if len(args) != 5:
            await update.message.reply_text(
                "тЭМ **ржнрзБрж▓ ржлрж░ржорзЗржЯ!**\n\n"
                "ЁЯУЭ **рж╕ржарж┐ржХ ржлрж░ржорзЗржЯ:**\n"
                "`/confirm uid ingamename diamond method txid`\n\n"
                "**ржЙржжрж╛рж╣рж░ржг:**\n"
                "`/confirm 123456789 PlayerName 610ЁЯТО BKash TXN123456`",
                parse_mode='Markdown'
            )
            return
        
        uid, ingame_name, diamond_amount, method, txid = args
        
        # Generate order ID
        order_counter += 1
        order_id = str(order_counter)
        
        # Store order
        orders[order_id] = {
            'user_id': update.effective_user.id,
            'username': update.effective_user.username or 'N/A',
            'uid': uid,
            'ingame_name': ingame_name,
            'diamond_amount': diamond_amount,
            'method': method,
            'txid': txid,
            'timestamp': datetime.now().isoformat(),
            'status': 'pending'
        }
        
        # Save orders
        save_orders(orders)
        
        # Send confirmation to user
        user_message = f"""
тЬЕ **ржЕрж░рзНржбрж╛рж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЬржорж╛ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯЖФ **ржЕрж░рзНржбрж╛рж░ ржирж╛ржорзНржмрж╛рж░:** #{order_id}
ЁЯСд **UID:** `{uid}`
ЁЯОо **ржЧрзЗржо ржирзЗржо:** {ingame_name}
ЁЯТО **ржбрж╛ржпрж╝ржоржирзНржб:** {diamond_amount}
ЁЯТ│ **ржкрзЗржорзЗржирзНржЯ ржорзЗржержб:** {method}
ЁЯз╛ **TXN ID:** `{txid}`

тП│ **ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржП ржЖржЫрзЗ...**

ржзржирзНржпржмрж╛ржж! ЁЯЩП
        """
        
        await update.message.reply_text(user_message, parse_mode='Markdown')
        
        # Send order details to admin
        admin_message = f"""
ЁЯФФ **ржирждрзБржи ржЕрж░рзНржбрж╛рж░ - #{order_id}**

ЁЯСд **ржХрж╛рж╕рзНржЯржорж╛рж░ рждржерзНржп:**
- **User ID:** {update.effective_user.id}
- **Username:** @{update.effective_user.username or 'N/A'}
- **ржирж╛ржо:** {update.effective_user.full_name}

ЁЯОо **ржЕрж░рзНржбрж╛рж░ ржмрж┐ржмрж░ржг:**
- **FF UID:** `{uid}`
- **ржЧрзЗржо ржирзЗржо:** {ingame_name}
- **ржбрж╛ржпрж╝ржоржирзНржб:** {diamond_amount}
- **ржкрзЗржорзЗржирзНржЯ:** {method}
- **TXN ID:** `{txid}`

тП░ **ржЕрж░рзНржбрж╛рж░ рж╕ржоржпрж╝:** {datetime.now().strftime('%d/%m/%Y %I:%M %p')}

**ржЕрзНржпрж╛ржХрж╢ржи:**
тАв `/accept #{order_id} completedтЬЕ` - ржЧрзНрж░рж╣ржг ржХрж░рзБржи
тАв `/cancel #{order_id} reason:ржХрж╛рж░ржг` - ржмрж╛рждрж┐рж▓ ржХрж░рзБржи
        """
        
        await context.bot.send_message(
            chat_id=ADMIN_ID,
            text=admin_message,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"Error in confirm_order: {e}")
        await update.message.reply_text(
            "тЭМ **ржЕрж░рзНржбрж╛рж░ ржкрзНрж░рж╕рзЗрж╕рж┐ржВ ржП рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ!**\n\n"
            "ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ /help ржП ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред"
        )

async def like_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle like command"""
    like_message = """
тЭдя╕П **100 рж▓рж╛ржЗржХ ржЕрж░рзНржбрж╛рж░ ржХрж░рзЗржЫрзЗржи!**

ЁЯУЛ **ржмрж┐ржмрж░ржг:**
тАв **рж╕рж╛рж░рзНржнрж┐рж╕:** 100 Like
тАв **ржорзВрж▓рзНржп:** 10 ржЯрж╛ржХрж╛
тАв **ржбрзЗрж▓рж┐ржнрж╛рж░рж┐:** ржкрзНрж░рждрж┐ржжрж┐ржи рззрзжрзжржЯрж┐

тЪая╕П **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирзЛржЯ:**
- ржкрзНрж░рждрж┐ржжрж┐ржи рззрзжрзжржЯрж┐ рж▓рж╛ржЗржХ ржпрж╛ржмрзЗ
- ржХрзЛржи ржжрж┐ржи ржХржо ржЧрзЗрж▓рзЗ ржкрж░рзЗрж░ ржжрж┐ржи ржкрзВрж░ржг ржХрж░рзЗ ржжрзЗржУржпрж╝рж╛ рж╣ржмрзЗ
- ржорзЛржЯ рззрзжрзжржЯрж┐ рж▓рж╛ржЗржХ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐!

ЁЯТ│ **ржкрзЗржорзЗржирзНржЯ:** `/number` ржХржорж╛ржирзНржб ржжрж┐ржпрж╝рзЗ ржирж╛ржорзНржмрж╛рж░ ржжрзЗржЦрзБржи
ЁЯУЮ **ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо:** `/confirm` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи

ржзржирзНржпржмрж╛ржж! ЁЯЩП
    """
    await update.message.reply_text(like_message, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help information"""
    help_text = """
ЁЯЖШ **рж╕рж╛рж╣рж╛ржпрзНржп ржкрзНрж░ржпрж╝рзЛржЬржи?**

ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржкрзЛрж░рзНржЯ ржЯрж┐ржорзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи:

ЁЯСитАНЁЯТ╝ **Admin Contact:**
ЁЯУ▒ **Telegram:** @toushif56

ЁЯТм **рж╕рж╛рж╣рж╛ржпрзНржпрзЗрж░ ржЬржирзНржп ржорзЗрж╕рзЗржЬ ржХрж░рзБржи!**

ЁЯХТ **рж╕рж╛ржкрзЛрж░рзНржЯ рж╕ржоржпрж╝:** 24/7 Available
тЪб **ржжрзНрж░рзБржд рж░рзЗрж╕ржкржирзНрж╕ ржЧрзНржпрж╛рж░рж╛ржирзНржЯрж┐**

ржЖржорж░рж╛ ржЖржкржирж╛рж░ рж╕рзЗржмрж╛ржпрж╝ ржирж┐ржпрж╝рзЛржЬрж┐ржд! ЁЯдЭ
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def number_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show payment numbers"""
    
    # Create inline keyboard with copyable numbers
    keyboard = [
        [InlineKeyboardButton("ЁЯУ▒ BKash: 01799061749", callback_data="copy_bkash")],
        [InlineKeyboardButton("ЁЯТ│ Nagad: 01799061749", callback_data="copy_nagad")],
        [InlineKeyboardButton("ЁЯЯб Binance: 772652360", callback_data="copy_binance")],
        [InlineKeyboardButton("ЁЯФ╢ Bybit: 506222609", callback_data="copy_bybit")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    numbers_text = """
ЁЯТ│ **ржкрзЗржорзЗржирзНржЯ ржЕржкрж╢ржирж╕ржорзВрж╣:**

ЁЯУ▒ **BKash:** `01799061749`
ЁЯТ│ **Nagad:** `01799061749`
ЁЯЯб **Binance ID:** `772652360`
ЁЯФ╢ **Bybit ID:** `506222609`

ЁЯТ░ **Crypto Rate:**
тАв **Binance/Bybit:** рззрзирзж ржЯрж╛ржХрж╛ = рзз ржбрж▓рж╛рж░

тЪая╕П **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг:**
- ржкрзЗржорзЗржирзНржЯ ржХрж░рж╛рж░ ржкрж░ TXN ID рж╕рзЗржн ржХрж░рзБржи
- рж╕ржарж┐ржХ ржкрж░рж┐ржорж╛ржг ржкрж╛ржарж╛ржи
- `/confirm` ржХржорж╛ржирзНржб ржжрж┐ржпрж╝рзЗ ржЕрж░рзНржбрж╛рж░ ржХржиржлрж╛рж░рзНржо ржХрж░рзБржи

ржирж╛ржорзНржмрж╛рж░ ржХржкрж┐ ржХрж░рждрзЗ ржЙржкрж░рзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи! ЁЯСЖ
    """
    
    await update.message.reply_text(numbers_text, parse_mode='Markdown', reply_markup=reply_markup)

async def accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Accept order (Admin only)"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    try:
        message_text = update.message.text
        # Parse: /accept #1 completedтЬЕ
        parts = message_text.split(' ', 2)
        if len(parts) < 2:
            return
            
        order_id = parts[1].replace('#', '')
        status_msg = parts[2] if len(parts) > 2 else "completedтЬЕ"
        
        if order_id in orders:
            order = orders[order_id]
            orders[order_id]['status'] = 'completed'
            save_orders(orders)
            
            # Send completion message to customer
            completion_msg = f"""
тЬЕ **ржЕрж░рзНржбрж╛рж░ рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯЖФ **ржЕрж░рзНржбрж╛рж░ ржирж╛ржорзНржмрж╛рж░:** #{order_id}
ЁЯТО **ржбрж╛ржпрж╝ржоржирзНржб:** {order['diamond_amount']}
ЁЯОо **ржЧрзЗржо ржирзЗржо:** {order['ingame_name']}

ЁЯОЙ **ржЖржкржирж╛рж░ ржбрж╛ржпрж╝ржоржирзНржб ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯрзЗ ржпрзЛржЧ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗ!**

ржзржирзНржпржмрж╛ржж ржЖржорж╛ржжрзЗрж░ рж╕рж╛ржерзЗ ржерж╛ржХрж╛рж░ ржЬржирзНржп! ЁЯЩП
ржЖржмрж╛рж░ ржЕрж░рзНржбрж╛рж░ ржХрж░рждрзЗ /topup ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред
            """
            
            await context.bot.send_message(
                chat_id=order['user_id'],
                text=completion_msg,
                parse_mode='Markdown'
            )
            
            # Confirm to admin
            await update.message.reply_text(f"тЬЕ ржЕрж░рзНржбрж╛рж░ #{order_id} рж╕ржорзНржкржирзНржи рж╣ржпрж╝рзЗржЫрзЗ!")
            
    except Exception as e:
        logger.error(f"Error in accept_order: {e}")

async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel order (Admin only)"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    try:
        message_text = update.message.text
        # Parse: /cancel #1 reason:insufficient balance
        parts = message_text.split(' ', 2)
        if len(parts) < 3:
            return
            
        order_id = parts[1].replace('#', '')
        reason_part = parts[2]
        
        if reason_part.startswith('reason:'):
            reason = reason_part[7:]  # Remove 'reason:'
        else:
            reason = reason_part
        
        if order_id in orders:
            order = orders[order_id]
            orders[order_id]['status'] = 'cancelled'
            orders[order_id]['cancel_reason'] = reason
            save_orders(orders)
            
            # Send cancellation message to customer
            cancel_msg = f"""
тЭМ **ржЕрж░рзНржбрж╛рж░ ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ**

ЁЯЖФ **ржЕрж░рзНржбрж╛рж░ ржирж╛ржорзНржмрж╛рж░:** #{order_id}
ЁЯТО **ржбрж╛ржпрж╝ржоржирзНржб:** {order['diamond_amount']}

ЁЯУЭ **ржмрж╛рждрж┐рж▓рзЗрж░ ржХрж╛рж░ржг:**
{reason}

ЁЯТ░ **ржЖржкржирж╛рж░ ржкрзЗржорзЗржирзНржЯ рж░рж┐ржлрж╛ржирзНржб ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржмрзЗред**

ржЖрж░рзЛ ржЬрж╛ржирждрзЗ: @toushif56
            """
            
            await context.bot.send_message(
                chat_id=order['user_id'],
                text=cancel_msg,
                parse_mode='Markdown'
            )
            
            # Confirm to admin
            await update.message.reply_text(f"тЭМ ржЕрж░рзНржбрж╛рж░ #{order_id} ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")
            
    except Exception as e:
        logger.error(f"Error in cancel_order: {e}")

async def handle_callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle inline keyboard callbacks"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "copy_bkash":
        await query.edit_message_text("ЁЯУ▒ **BKash ржирж╛ржорзНржмрж╛рж░ ржХржкрж┐ ржХрж░рзБржи:**\n\n`01799061749`", parse_mode='Markdown')
    elif callback_data == "copy_nagad":
        await query.edit_message_text("ЁЯТ│ **Nagad ржирж╛ржорзНржмрж╛рж░ ржХржкрж┐ ржХрж░рзБржи:**\n\n`01799061749`", parse_mode='Markdown')
    elif callback_data == "copy_binance":
        await query.edit_message_text("ЁЯЯб **Binance ID ржХржкрж┐ ржХрж░рзБржи:**\n\n`772652360`", parse_mode='Markdown')
    elif callback_data == "copy_bybit":
        await query.edit_message_text("ЁЯФ╢ **Bybit ID ржХржкрж┐ ржХрж░рзБржи:**\n\n`506222609`", parse_mode='Markdown')

def main():
    """Start the bot"""
    # Create the Application
    application = Application.builder().token(BOT_TOKEN).build()

    # Add command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("commands", commands))
    application.add_handler(CommandHandler("topup", topup))
    application.add_handler(CommandHandler("confirm", confirm_order))
    application.add_handler(CommandHandler("like", like_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("number", number_command))
    application.add_handler(CommandHandler("accept", accept_order))
    application.add_handler(CommandHandler("cancel", cancel_order))
    
    # Add callback query handler
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(handle_callback_query))

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()